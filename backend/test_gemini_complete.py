#!/usr/bin/env python3
"""
Complete test for Gemini AI quiz generation
"""

import os
import json
import requests
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

def test_gemini_direct():
    """Test Gemini API directly"""
    print("🧪 Testing Gemini API Directly...")
    print("=" * 40)
    
    try:
        import google.generativeai as genai
        
        api_key = "AIzaSyDom09ZeJmXM-nbKs1z05YKMDqNSU4gbyk"
        genai.configure(api_key=api_key)
        model = genai.GenerativeModel('gemini-1.5-flash')
        
        prompt = """
        Generate 2 multiple-choice quiz questions for Mathematics at easy level.
        Format as JSON array with this structure:
        [
            {
                "question_text": "What is 5 + 3?",
                "options": ["2", "8", "15", "7"],
                "correct_answer": "8",
                "explanation": "5 + 3 = 8"
            }
        ]
        """
        
        response = model.generate_content(prompt)
        
        if response and response.text:
            print("✅ Gemini API working!")
            print(f"📝 Response: {response.text[:300]}...")
            return True
        else:
            print("❌ Empty response")
            return False
            
    except Exception as e:
        print(f"❌ Error: {str(e)}")
        return False

def test_ai_models():
    """Test the AI models integration"""
    print("\n🤖 Testing AI Models Integration...")
    print("=" * 40)
    
    try:
        from ai_models import AIQuizGenerator
        
        generator = AIQuizGenerator()
        
        questions = generator.generate_quiz_questions(
            subject="Mathematics",
            difficulty="easy",
            num_questions=2,
            topic="Basic Math",
            preferred_model="gemini"
        )
        
        if questions:
            print(f"✅ Generated {len(questions)} questions!")
            for i, q in enumerate(questions, 1):
                print(f"   Q{i}: {q.get('question_text', 'N/A')[:50]}...")
                print(f"   Answer: {q.get('correct_answer', 'N/A')}")
            return True
        else:
            print("❌ No questions generated")
            return False
            
    except Exception as e:
        print(f"❌ Error: {str(e)}")
        return False

def test_backend_server():
    """Test if backend server is running"""
    print("\n🌐 Testing Backend Server...")
    print("=" * 40)
    
    try:
        response = requests.get("http://localhost:8006/api/health", timeout=5)
        if response.status_code == 200:
            print("✅ Backend server is running!")
            return True
        else:
            print(f"❌ Server responded with status: {response.status_code}")
            return False
    except requests.exceptions.ConnectionError:
        print("❌ Backend server is not running")
        print("💡 Start it with: python complete_backend.py")
        return False
    except Exception as e:
        print(f"❌ Error: {str(e)}")
        return False

def test_quiz_generation_endpoint():
    """Test the quiz generation endpoint"""
    print("\n🎯 Testing Quiz Generation Endpoint...")
    print("=" * 40)
    
    try:
        payload = {
            "title": "Test Gemini Quiz",
            "description": "A test quiz generated by Gemini AI",
            "subject": "Mathematics",
            "difficulty": "easy",
            "num_questions": 2,
            "user_id": 1,
            "user_role": "super_admin"
        }
        
        response = requests.post(
            "http://localhost:8006/api/quizzes/auto-generate",
            json=payload,
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            print("✅ Quiz generation endpoint working!")
            print(f"📝 Generated quiz: {result.get('quiz', {}).get('title', 'N/A')}")
            print(f"📊 Questions: {result.get('quiz', {}).get('total_questions', 0)}")
            return True
        else:
            print(f"❌ Endpoint error: {response.status_code}")
            print(f"📝 Response: {response.text}")
            return False
            
    except Exception as e:
        print(f"❌ Error: {str(e)}")
        return False

def main():
    """Run all tests"""
    print("🚀 Complete Gemini AI Test Suite")
    print("=" * 50)
    
    # Set environment variables
    os.environ['GEMINI_API_KEY'] = "AIzaSyDom09ZeJmXM-nbKs1z05YKMDqNSU4gbyk"
    os.environ['DEFAULT_AI_MODEL'] = "gemini"
    
    tests = [
        ("Gemini API Direct", test_gemini_direct),
        ("AI Models Integration", test_ai_models),
        ("Backend Server", test_backend_server),
        ("Quiz Generation Endpoint", test_quiz_generation_endpoint)
    ]
    
    results = []
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"❌ {test_name} failed with exception: {str(e)}")
            results.append((test_name, False))
    
    # Summary
    print("\n📊 Test Results Summary")
    print("=" * 30)
    for test_name, result in results:
        status = "✅ PASS" if result else "❌ FAIL"
        print(f"{status} {test_name}")
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    print(f"\n🎯 Overall: {passed}/{total} tests passed")
    
    if passed == total:
        print("🎉 All tests passed! Gemini AI is ready to use!")
    else:
        print("⚠️  Some tests failed. Check the errors above.")

if __name__ == "__main__":
    main()
